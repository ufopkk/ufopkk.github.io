<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自家博客</title>
  
  
  <link href="http://ufopkk.github.io/atom.xml" rel="self"/>
  
  <link href="http://ufopkk.github.io/"/>
  <updated>2022-11-08T07:50:16.582Z</updated>
  <id>http://ufopkk.github.io/</id>
  
  <author>
    <name>看秋天的你</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文Python画图</title>
    <link href="http://ufopkk.github.io/posts/36630/"/>
    <id>http://ufopkk.github.io/posts/36630/</id>
    <published>2022-11-08T09:46:08.000Z</published>
    <updated>2022-11-08T07:50:16.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="matplotlib绘制箱形图"><a href="#matplotlib绘制箱形图" class="headerlink" title="matplotlib绘制箱形图"></a>matplotlib绘制箱形图</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;matplotlib绘制箱形图&quot;&gt;&lt;a href=&quot;#matplotlib绘制箱形图&quot; class=&quot;headerlink&quot; title=&quot;matplotlib绘制箱形图&quot;&gt;&lt;/a&gt;matplotlib绘制箱形图&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大数据开发面试题</title>
    <link href="http://ufopkk.github.io/posts/6aface50/"/>
    <id>http://ufopkk.github.io/posts/6aface50/</id>
    <published>2021-06-08T02:18:31.000Z</published>
    <updated>2021-09-02T05:45:20.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bigdata"><a href="#bigdata" class="headerlink" title="bigdata"></a>bigdata</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>Shuffle指的是将各节点上同一类数据汇聚到某一节点上进行计算，把分布在不同节点的数据按照一定的规则汇聚到同一节点的过程<br>称为Shuffle。</p><span id="more"></span><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>MapReduce Shuffle和Spark Shuffle的区别？<br>MapReduce Shuffle中Shuffle阶段分为Map端的Shuffle和Reduce端的Shuffle。<br>频繁的磁盘I/O会严重影响效率，因此map阶段的中间结果不会立刻写入磁盘，而是优先存储到map节点的“环形内存缓冲区”，在写入的过程中进行分区，对于每个键值对都增加一个partition属性<br>（默认对key取hash值，然后hash值对reduce的个数取余作为partition的属性值），然后以&lt;partition,key,value&gt;的形式序列化为字节数组写入缓冲区。<br>当写入的数据量达到阈值后启动溢出写出线程将缓冲区中的数据写入到磁盘的临时文件中，并在写入前根据key进行排序和合并，使得相同partition的数据汇聚在一起，各个partition内根据key排序。<br>Spark shuffle<br>在DAG构建阶段以shuffle为界，划分stage,上游stage做map task，每一个map task将自己处理的数据按key进行分区，将相同key的数据写入同一个磁盘文件。<br>shuffle write阶段，map task为下游stage的每个task都创建了一个磁盘文件<br>shuffle read阶段<br>下游stage做reduce task,每一个reduce task通过网络拉取上游stage中所有map task的指定分区结果数据。</li><li>Spark SQL的连接方式有几种，各自的适用场景是什么？<br>Broadcast Hash Join：适合一张很小的表和一张大表进行Join；<br>hash join<br>Shuffle Hash Join：适合一张小表(比上一个大一点)和一张大表进行Join；<br>Sort Merge Join：适合两张大表进行Join；</li><li>hive数据库的特点是什么？<br><a href="http://www.saoniuhuo.com/article/detail-682.html">hive的特点</a><br>Hive是由Facebook开源的用于解决海量结构化日志的数据统计工具。可以将结构化的数据文件映射为一张表，并提供类SQL查询功能。<br>hive以HDFS为基本的文件存储，以MapReduce为默认执行引擎。<br>优点：<br>  1) 操作接口采用类SQL语法(HQL)，提供快速开发的能力（简单、容易上手）。<br>  2) 避免了用户去写MapReduce程序，减少开发人员的学习成本。<br>  3) Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。<br>  4) Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。<br>  5) Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。<br>缺点：<br>  1）Hive的HQL表达能力有限<br>    （1）迭代式算法无法表达<br>    （2）数据挖掘方面不擅长<br>  2）Hive的效率比较低<br>    （1）Hive自动生成的MapReduce作业，通常情况下不够智能化<br>    （2）Hive调优比较困难，粒度较粗<br>hdfs的架构<br>HDFS采用master/slave架构，这种架构主要由四个部分组成，分别为HDFS Client、NameNode、DataNode和Secondary NameNode。<br>一个HDFS集群是由一个NameNode和一定数目的DataNode组成的。<br>NameNode维护整个hdfs文件系统的元数据信息（目录）<br>负责确定指定的文件块到DataNode节点的映射关系<br>管理DataNode节点的状态报告，包括Datanode结点的健康状态报告和其所在结点上数据块状态报告，以便能够及时处理失效的数据</li></ol><p>presto和hive的区别<br>presto是一个facebook开源的分布式SQL查询引擎，适用于交互式分析查询。其采用典型的master-slave模型，<br>coordinator(master)负责meta管理,worker管理，query的解析和调度，worker则负责计算和读写。</p><ol><li>hive将一个查询转化为多个MR任务，然后一个接一个执行。执行的中间结果通过对磁盘的读写来同步。<br>Presto没有使用MapReduce，它是通过一个定制的查询和执行引擎来完成的，它的所有的查询处理是在内存中。<br>presto由于是基于内存的，而hive是在磁盘上读写的，因此presto比hive快很多，但是由于是基于内存的当多张大表关联操作时易引起内存溢出错误</li></ol><p>MR和Spark的区别</p><ul><li>MR是基于进程，spark是基于线程</li><li>Spark把运算中数据放到内存中，迭代计算效率会更高；MR的中间结果需要落地磁盘，所以大量的磁盘IO操作，会影响性能</li><li>MR的每一个task都是一个进程，当task完成时，进程也会结束，Spark的多个task跑在同一个进程上，这个进程会伴随spark应用程序的整个生命周期，即使没有作业进行，进程也是存在的</li><li>spark容错性高，它通过弹性分布式数据集RDD来实现高效容错；MR的话容错可能只能重新计算了，成本较高。</li><li>MR运行在yarn上，spark有local、Standalone、Yarn、Messos四种部署模式</li><li>spark通用性更强，spark提供了transformation和action这两大类多功能API，另外还有流式处理SparkStreaming模块，机器学习、图计算；MR只提供Map和Reduce方法，没有其他模块，MR其实是有机器学习的基本上没有人使用。</li><li>spark框架和生态更为复杂，MR框架及其生态相对较为简单，对性能的要求也相对较弱，但是运行较为稳定，适合长期后台运行</li></ul><p>Hbase和Hive的区别<br>Hbase和Hive在大数据架构中处在不同位置，Hbase主要解决实时数据查询问题，Hive主要解决数据处理和计算问题，一般是配合使用。</p><ol><li>Hbase: hadoop database, 基于hadoop的数据库，适用于海量明细数据的随机实时查询。hive本质是一个数据仓库，<br>适用于离线的批量数据计算</li></ol><h2 id="数仓分层"><a href="#数仓分层" class="headerlink" title="数仓分层"></a>数仓分层</h2><ol><li>OSD层（原始数据层），存放原始的数据</li><li>DWD（明细数据层）</li><li>服务数据层</li><li>数据应用层</li></ol><p>spark算子<br>transformation算子：map、flatMap、filter、groupByKey、reduceByKey、sortByKey<br>action算子：<br>reduce、<br>collect、<br>count()、<br>first()、take、aggregate、foreach、saveAsTextFile</p><p>flink的窗口时间属性TimeCharacteristic分为三种：ProcessingTime，IngestionTime，EventTime。<br>处理时间：处理流的operator在执行时，所属机器上的本地时间。Processing-time 窗口包含所有在一个时间周期内到达window operator 的events，以本地机器时间衡量。<br>事件时间：事件时间是一个event实际发生的时间，是实际应用最常见的时间语义<br>摄入时间：存在多个Source Operator的情况下，每个 Source Operator可以使用自己本地系统时钟指派 Ingestion Time。后续基于时间相关的各种操作，都会使用数据记录中的 Ingestion Time。</p><p>hdfs的缺点：</p><ol><li>不支持低延迟数据访问</li><li>不适合大量小文件存储</li><li>不支持并发写入，一个文件只能有一个写入者</li><li>不支持在文件的任意位置进行修改。写操作总是将数据添加在文件的末尾（append）</li></ol><p>Scala是一种多范式的编程语言，其设计的初衷是要集成面向对象编程和函数式编程的各种特性。Scala运行于Java平台（Java虚拟机），并兼容现有的Java程序。<br>Scala语言表达能力强，一行代码抵得上Java多行，开发速度快；Scala是静态编译的，所以和JRuby,Groovy比起来速度会快很多</p><h2 id="数仓建模维度"><a href="#数仓建模维度" class="headerlink" title="数仓建模维度"></a>数仓建模维度</h2><p>维度表：</p><ul><li>星型模型：一张事实表，周围散列多张维度表，维度表都是一级，维度表和事实表之间直接关联。</li><li>雪花模型：维度表有多个层级，并且间接和事实表相连。</li><li>星座模型：星座模式是星型模式延伸而来，星型模式是基于一张事实表的，而星座模式是基于多张事实表的，而且共享维度信息。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;bigdata&quot;&gt;&lt;a href=&quot;#bigdata&quot; class=&quot;headerlink&quot; title=&quot;bigdata&quot;&gt;&lt;/a&gt;bigdata&lt;/h1&gt;&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;Shuffle指的是将各节点上同一类数据汇聚到某一节点上进行计算，把分布在不同节点的数据按照一定的规则汇聚到同一节点的过程&lt;br&gt;称为Shuffle。&lt;/p&gt;</summary>
    
    
    
    <category term="面试学习" scheme="http://ufopkk.github.io/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="大数据面试" scheme="http://ufopkk.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>金融小知识随记</title>
    <link href="http://ufopkk.github.io/posts/0/"/>
    <id>http://ufopkk.github.io/posts/0/</id>
    <published>2021-06-08T02:18:31.000Z</published>
    <updated>2022-11-08T08:07:02.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>借记卡</li></ul><ul><li>信用卡</li></ul><h1 id="公式编辑"><a href="#公式编辑" class="headerlink" title="公式编辑"></a>公式编辑</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;借记卡&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;信用卡&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;公式编辑&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="工作笔记" scheme="http://ufopkk.github.io/categories/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://ufopkk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java面试笔记</title>
    <link href="http://ufopkk.github.io/posts/f9ba3e83/"/>
    <id>http://ufopkk.github.io/posts/f9ba3e83/</id>
    <published>2021-05-11T01:31:19.000Z</published>
    <updated>2021-08-06T03:21:32.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li>ArrayList和LinkedList的区别？<br>ArrayList底层使用的是Object数组，而LinkedList底层使用的是双向链表</li><li>ArrayList和Vector的区别？<br>Vector是线程安全的</li><li>HashTable<br>HashTable&lt;K,V&gt;也是一种key-value结构，它继承自Dictionary&lt;K,V&gt;，实现了Map&lt;K,V&gt;。<br>单线程转为使用HashMap，多线程使用ConcurrentHashMap</li></ol><ol start="4"><li><font color="#FF0000">java自定义注解</font><br>通过元注解实现<a href="https://blog.csdn.net/zt15732625878/article/details/100061528">Java实现自定义注解</a></li></ol><h2 id="Java多并发编程"><a href="#Java多并发编程" class="headerlink" title="Java多并发编程"></a>Java多并发编程</h2><p>堆、方法区、程序计数器、Java虚拟机栈、本地方法栈<br>线程私有：程序计数器、Java虚拟机栈、本地方法栈<br>线程共有：堆和方法区<br>程序计数器：一块较小的内存空间，可以看作当前线程所执行字节码的行号指示器，字节码解释器工作时通过改变计数器的值选择下一条指令。分支、循环、跳转以及线程恢复等功能都要依赖程序计数器完成。如果线程正在执行Java方法，记录正在执行的虚拟机字节码指令地址；如果执行本地方法，计数器值为Undefined。<br>Java虚拟机栈：用来描述Java方法的内存模型，当有线程创建时就会分配一个栈空间，线程销毁时回收栈空间，栈与线程的生命周期相同。栈中元素用于支持虚拟机进行方法调用，每个方法在执行时会创建一个栈帧用于存储局部变量表、操作栈、动态链接和方法出口等信息。每个方法从调用到执行完成，就是栈帧从入栈到出栈的过程。<br>方法区用于存储被虚拟机加载的类型信息、常量、静态变量，即时编译器编译的代码缓存等数据。  </p><h3 id="synchronized的底层"><a href="#synchronized的底层" class="headerlink" title="synchronized的底层"></a>synchronized的底层</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ol><li>产生死锁的四个条件</li></ol><ul><li>互斥条件：任意时刻某个资源只由一个线程占有</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><ol start="2"><li> 如何预防和避免死锁</li><li>破坏请求与保持条件<span id="more"></span></li></ol><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="7大原则"><a href="#7大原则" class="headerlink" title="7大原则"></a>7大原则</h3><h3 id="23种模式"><a href="#23种模式" class="headerlink" title="23种模式"></a>23种模式</h3><p>创建型5种、结构型7种、行为型11种<br>创建型： 单例模式、原型模式、简单工厂模式、工厂方法模式、抽象工厂模式<br>结构型： 代理模式、适配器模式、桥接模式、装饰模式、外观模式、享元模式、组合模式  </p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>http和https的区别  </li></ol><ul><li>http是超文本传输协议，信息是明文传输，而https是由超文本传输协议和安全通讯层（SSL）构建的可进行加密传输、身份认证的网络协议，比http协议安全  </li><li>http和https使用的是完全不同的连接方式，使用的端口也不同。http使用80端口，https使用443端口。   </li></ul><ol start="2"><li>OSI(开放式系统互联通信参考模型),OSI七层参考模型内容<br>物理层–&gt;数据链路层–&gt;网络层–&gt;传输层–&gt;会话层–&gt;表示层–&gt;应用层<br>常见的应用层服务协议包括：HTTP、HTTPS、FTP、POP3、SMTP、DNS等。<br>传输层协议包括：TCP和UDP<br>网络层协议：IP、ICMP、RIP、IGMP<br>数据链路层协议:ARP、RARP、PPP  </li><li>TCP(传输控制协议),UDP(用户数据报协议)<br>TCP五层协议：物理层–&gt;数据链路层–&gt;网络层–&gt;传输层–&gt;应用层</li><li>TCP的三次握手和四次握手</li></ol><h1 id="Java动态代理和CGLib（code-generation-library）动态代理"><a href="#Java动态代理和CGLib（code-generation-library）动态代理" class="headerlink" title="Java动态代理和CGLib（code generation library）动态代理"></a>Java动态代理和CGLib（code generation library）动态代理</h1><p>jdk动态代理要求被代理对象必须要实现接口，才能生成代理对象。<br>cglib:可以对任何类生成代理，代理的原理是对目标对象进行继承代理，如果目标对象被final修饰，<br>则该类无法被cglib动态代理。  </p><h1 id="Java面试易错题"><a href="#Java面试易错题" class="headerlink" title="Java面试易错题"></a>Java面试易错题</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>将类信息加载到内存中，类的初始化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> abc = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">static</span>{</span><br><span class="line">System.out.println(<span class="string">"P is init"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S</span> <span class="keyword">extends</span> <span class="title">P</span> </span>{</span><br><span class="line"><span class="keyword">static</span>{</span><br><span class="line">System.out.println(<span class="string">"S is init"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">System.out.println(S.abc);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><p>子类引用父类的静态字段，只会触发子类的加载、父类的初始化，不会触发子类的初始化。  </p></li><li><p>通过数组定义来引用类，不会触发此类的初始化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>{ </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{ </span><br><span class="line">        SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>]; </span><br><span class="line">    }   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>.常量在编译阶段会进行常量优化，将常量存入调用类的常量池中， 本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化.  </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstClass</span> </span>{ </span><br><span class="line">    <span class="keyword">static</span> { </span><br><span class="line">        System.out.println(<span class="string">"ConstClass init!"</span>); </span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>; </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span></span>{ </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{ </span><br><span class="line">        <span class="keyword">int</span> x = ConstClass.value; </span><br><span class="line">    } </span><br><span class="line">} </span><br><span class="line"><span class="comment">//上述代码运行之后，不输出“ConstClass init！”</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="Java中的内部类"><a href="#Java中的内部类" class="headerlink" title="Java中的内部类"></a>Java中的内部类</h1><p>Java中可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。内部类分为：<br>成员内部类、局部内部类和匿名内部类。</p><ol><li>成员内部类<blockquote><p>该类像外部类的一个成员，可以无条件访问外部类的所有成员属性和成员方法。</p></blockquote></li><li>局部内部类<blockquote><p>局部内部类是定义在一个方法或者一个作用阈中的类，它和成员内部类的区别在于局部内部类的<br>访问权限仅限于方法内或作用域内；局部内部类像方法中的局部变量一样，不能被public、private、protected<br>和static等修饰符修饰。</p></blockquote></li><li>匿名内部类<blockquote><p>匿名内部类定义形式：new 父类构造器（无参|有参）| 实现接口（）{@Override}<br>使用匿名内部类必须继承一个类或者实现一个接口，但是两者不能同时实现，只能继承一个类或者<br>实现一个接口<br>匿名内部类中不能定义构造方法<br>匿名内部类中不能存在静态成员变量和静态方法<br>匿名内部类不能是抽象的，必须实现继承的类或者实现接口中所有的抽象方法。</p></blockquote></li><li>静态内部类<blockquote><p>静态内部类不需要依赖于外部类，和类的静态成员类似。<br>不能使用外部类的非静态成员变量和方法。</p></blockquote></li></ol><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p><a href="https://blog.csdn.net/ye17186/article/details/89467919">Java线程池七个参数详解</a></p><h2 id="线程池拒绝策略"><a href="#线程池拒绝策略" class="headerlink" title="线程池拒绝策略"></a>线程池拒绝策略</h2><p><a href="https://blog.csdn.net/suifeng629/article/details/98884972">四种线程池拒绝策略</a><br>当线程池的任务缓冲队列已满并且线程池中的线程数量达到maximunPoolSize时，还有新任务到来就会采用拒绝策略<br>通常有以下四种策略：<br>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常<br>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。<br>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务<br>ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务  </p><h1 id="Spring解决循环依赖的方法"><a href="#Spring解决循环依赖的方法" class="headerlink" title="Spring解决循环依赖的方法"></a>Spring解决循环依赖的方法</h1><h2 id="Spring中循环依赖的场景："><a href="#Spring中循环依赖的场景：" class="headerlink" title="Spring中循环依赖的场景："></a>Spring中循环依赖的场景：</h2><ol><li>构造器的循环依赖；</li><li>filed属性的循环依赖；<br>Spring的循环依赖理论是基于Java的引用传递，当获取到对象的引用时，对象的属性是可以延后设置的(但是构造器必须是在获取引用之前)。<br>Spring单例对象的初始化主要分为：</li></ol><ul><li>循环依赖就是N个类循环嵌套引用，用new 对象的方式发生这种循环依赖的话程序会在运行时一直循环调用，直至内存溢出报错。<br>无法解决构造器注入构成的循环依赖</li><li>setter方式注入，bean的作用域为“singleton”。Spring容器首先构造实例化Bean对象，Spring会将实例化后的对象<br>加入ConcurrentHashMap中，Spring提供了获取这个未设置属性的实例化对象引用的方法。</li><li>对于“prototype”作用域Bean，Spring容器无法完成依赖注入，因为“prototype”作用域的Bean，Spring容器不进行缓存，因此无法提前暴露一个创建中的Bean</li></ul><h2 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a><a href="https://blog.csdn.net/guorui_java/article/details/107347754">Spring常用注解</a></h2><ul><li>包扫描+组件标注注解<ul><li>@Component:泛指各种组件，包括@Controller、@Service、@Repository</li></ul></li><li>注入Bean相关注解<ul><li>@Bean 明确地指示了一种产生一个bean的方法，并且交给Spring容器管理。支持别名@Bean(“xx-name”)</li><li>@Scope,作用在类和方法上，用来配置bean的作用域。</li></ul>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Scope(value="",proxyMode="")</span><br><span class="line">value:</span><br><span class="line">    singleton 表示bean是单例的</span><br><span class="line">    prototype 表示bean是多例的</span><br><span class="line">    request   一次http请求，一个bean对应一个实例</span><br><span class="line">    session     在一个httpSession中，一个bean对应一个实例。</span><br><span class="line">proxyMode</span><br><span class="line">    DEFAULT         不使用代理。(默认)</span><br><span class="line">    NO              不使用代理，等价于DEFAULT。</span><br><span class="line">    INTERFACES      使用基于接口的代理(jdk dynamic proxy)。</span><br><span class="line">    TARGET_CLASS    使用基于类的代理(cglib)。</span><br></pre></td></tr></tbody></table></figure><ul><li>bean的导入</li></ul>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Autowired 自动导入</span><br><span class="line">@Inject</span><br><span class="line">@Resource</span><br><span class="line">@Primary</span><br><span class="line">@Qualifier</span><br></pre></td></tr></tbody></table></figure></li><li><a href="https://www.cnblogs.com/tqlin/p/11687811.html">Controller相关注解</a><ul><li>@RestController,@Controller+@ResponseBody，将方法返回的对象以json格式返回给浏览器</li><li>@RequestBody 通过HttpMessageConverter读取Request Body并反序列化为Object（泛指）对象</li><li>@RequestMapping，将 HTTP 请求映射到 MVC 和 REST 控制器的处理方法上</li></ul>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping用于将HTTP get请求映射到特定处理程序的方法注解</span><br><span class="line">@RequestMapping(value = "/say",method = RequestMethod.GET) == @GetMapping(value = "/say")</span><br><span class="line">@PostMapping用于将HTTP post请求映射到特定处理程序的方法注解</span><br><span class="line">@RequestMapping(method = RequestMethod.POST) == @PostMapping</span><br></pre></td></tr></tbody></table></figure><ul><li>获取请求参数</li></ul>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@PathVariable 获取url中的数据</span><br><span class="line">@RequestMapping("/getUser/{uid}")</span><br><span class="line">public String getUser(@PathVariable("uid")Integer id, Model model) {</span><br><span class="line">    System.out.println("id:"+id);</span><br><span class="line">    return "user";</span><br><span class="line">}</span><br><span class="line">@RequestParam 获取请求参数的值</span><br><span class="line">@RequestMapping("/getUser")</span><br><span class="line">public String getUser(@RequestParam("uid")Integer id, Model model) {</span><br><span class="line">    System.out.println("id:"+id);</span><br><span class="line">    return "user";</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>事务注解<ul><li>@Tansactional，Spring中，事务有编程式事务管理和声明式事务管理两种方式</li></ul></li></ul><h1 id="JDK1-8新特性"><a href="#JDK1-8新特性" class="headerlink" title="JDK1.8新特性"></a>JDK1.8新特性</h1><ol><li>什么时候会出现空指针异常（NullPointerException）？<blockquote><p>optional处理空值<br>空值异常是java应用程序失败的主要原因</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optional.of(); //把 null 值作为参数传递进去，of() 方法会抛出 NullPointerException</span><br><span class="line">optional.ofNullable(); //对象即可能是 null 也可能是非 null</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h1&gt;&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ArrayList和LinkedList的区别？&lt;br&gt;ArrayList底层使用的是Object数组，而LinkedList底层使用的是双向链表&lt;/li&gt;
&lt;li&gt;ArrayList和Vector的区别？&lt;br&gt;Vector是线程安全的&lt;/li&gt;
&lt;li&gt;HashTable&lt;br&gt;HashTable&amp;lt;K,V&amp;gt;也是一种key-value结构，它继承自Dictionary&amp;lt;K,V&amp;gt;，实现了Map&amp;lt;K,V&amp;gt;。&lt;br&gt;单线程转为使用HashMap，多线程使用ConcurrentHashMap&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;font color=&quot;#FF0000&quot;&gt;java自定义注解&lt;/font&gt;&lt;br&gt;通过元注解实现&lt;a href=&quot;https://blog.csdn.net/zt15732625878/article/details/100061528&quot;&gt;Java实现自定义注解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Java多并发编程&quot;&gt;&lt;a href=&quot;#Java多并发编程&quot; class=&quot;headerlink&quot; title=&quot;Java多并发编程&quot;&gt;&lt;/a&gt;Java多并发编程&lt;/h2&gt;&lt;p&gt;堆、方法区、程序计数器、Java虚拟机栈、本地方法栈&lt;br&gt;线程私有：程序计数器、Java虚拟机栈、本地方法栈&lt;br&gt;线程共有：堆和方法区&lt;br&gt;程序计数器：一块较小的内存空间，可以看作当前线程所执行字节码的行号指示器，字节码解释器工作时通过改变计数器的值选择下一条指令。分支、循环、跳转以及线程恢复等功能都要依赖程序计数器完成。如果线程正在执行Java方法，记录正在执行的虚拟机字节码指令地址；如果执行本地方法，计数器值为Undefined。&lt;br&gt;Java虚拟机栈：用来描述Java方法的内存模型，当有线程创建时就会分配一个栈空间，线程销毁时回收栈空间，栈与线程的生命周期相同。栈中元素用于支持虚拟机进行方法调用，每个方法在执行时会创建一个栈帧用于存储局部变量表、操作栈、动态链接和方法出口等信息。每个方法从调用到执行完成，就是栈帧从入栈到出栈的过程。&lt;br&gt;方法区用于存储被虚拟机加载的类型信息、常量、静态变量，即时编译器编译的代码缓存等数据。  &lt;/p&gt;
&lt;h3 id=&quot;synchronized的底层&quot;&gt;&lt;a href=&quot;#synchronized的底层&quot; class=&quot;headerlink&quot; title=&quot;synchronized的底层&quot;&gt;&lt;/a&gt;synchronized的底层&lt;/h3&gt;&lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;产生死锁的四个条件&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件：任意时刻某个资源只由一个线程占有&lt;/li&gt;
&lt;li&gt;请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。&lt;/li&gt;
&lt;li&gt;不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。&lt;/li&gt;
&lt;li&gt;循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt; 如何预防和避免死锁&lt;/li&gt;
&lt;li&gt;破坏请求与保持条件&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="面试学习" scheme="http://ufopkk.github.io/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java面试" scheme="http://ufopkk.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>latex常用数学符号</title>
    <link href="http://ufopkk.github.io/posts/2f6be78b/"/>
    <id>http://ufopkk.github.io/posts/2f6be78b/</id>
    <published>2021-05-09T03:15:25.000Z</published>
    <updated>2021-05-13T07:35:00.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="word"><a href="#word" class="headerlink" title="word"></a>word</h1><h1 id="公式编辑"><a href="#公式编辑" class="headerlink" title="公式编辑"></a>公式编辑</h1><span id="more"></span><h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h2><h2 id="数据库常用符号"><a href="#数据库常用符号" class="headerlink" title="数据库常用符号"></a>数据库常用符号</h2><ul><li>定界符</li></ul><table><thead><tr><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th></tr></thead><tbody><tr><td align="center">(</td><td align="center">(</td><td align="center">)</td><td align="center">)</td><td align="center">[</td><td align="center">[或\lbrack</td><td align="center">]</td><td align="center">]或\rbrack</td></tr><tr><td align="center">[[</td><td align="center">\llbracket</td><td align="center">]]</td><td align="center">\rrbracket</td><td align="center">{</td><td align="center">{或\lbrace</td><td align="center">}</td><td align="center">}或\rbrace</td></tr></tbody></table><ul><li>大定界符</li></ul><table><thead><tr><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th></tr></thead><tbody><tr><td align="center">(</td><td align="center">(</td><td align="center">)</td><td align="center">)</td><td align="center">[</td><td align="center">[或\lbrack</td><td align="center">]</td><td align="center">]或\rbrack</td></tr><tr><td align="center">[[</td><td align="center">\llbracket</td><td align="center">]]</td><td align="center">\rrbracket</td><td align="center">{</td><td align="center">{或\lbrace</td><td align="center">}</td><td align="center">}或\rbrace</td></tr></tbody></table><ul><li>AMS 二元关系</li></ul><table><thead><tr><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th><th align="center">符号</th><th align="center">Latex命令</th></tr></thead><tbody><tr><td align="center">⋖</td><td align="center">\lessdot</td><td align="center">⋗</td><td align="center">\gtrdot</td><td align="center">≑</td><td align="center">\doteqdot</td><td align="center">⩽</td><td align="center">\leqslant</td></tr><tr><td align="center">⩾</td><td align="center">\geqslant</td><td align="center">≓</td><td align="center">\risingdotseq</td><td align="center">⪕</td><td align="center">\eqslantless</td><td align="center">⪖</td><td align="center">\eqslantgtr</td></tr><tr><td align="center">≒</td><td align="center">\fallingdotseq</td><td align="center">≦</td><td align="center">\leqq</td><td align="center">≧</td><td align="center">\geqq</td><td align="center">≖</td><td align="center">\eqcirc</td></tr><tr><td align="center">⋘</td><td align="center">\lll 或 \llless</td><td align="center">⋙</td><td align="center">\ggg</td><td align="center">≗</td><td align="center">\circeq</td><td align="center">≲</td><td align="center">\lesssim</td></tr></tbody></table><h2 id="空心中括号"><a href="#空心中括号" class="headerlink" title="空心中括号"></a>空心中括号</h2><p>\usepackage{stmaryrd}<br>$\llbracket{x=0}\rrbracket$</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;word&quot;&gt;&lt;a href=&quot;#word&quot; class=&quot;headerlink&quot; title=&quot;word&quot;&gt;&lt;/a&gt;word&lt;/h1&gt;&lt;h1 id=&quot;公式编辑&quot;&gt;&lt;a href=&quot;#公式编辑&quot; class=&quot;headerlink&quot; title=&quot;公式编辑&quot;&gt;&lt;/a&gt;公式编辑&lt;/h1&gt;</summary>
    
    
    
    <category term="word实用插件" scheme="http://ufopkk.github.io/categories/word%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    
    <category term="latex语法" scheme="http://ufopkk.github.io/categories/latex%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="latex语法" scheme="http://ufopkk.github.io/tags/latex%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo和github搭建博客</title>
    <link href="http://ufopkk.github.io/posts/38872/"/>
    <id>http://ufopkk.github.io/posts/38872/</id>
    <published>2021-04-27T09:54:52.000Z</published>
    <updated>2021-05-13T07:26:45.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ol><li><p>hexo init<br><code>hexo init</code>用于初始化本地文件夹为网站的根目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br><span class="line">hexo deploy  hexo -d </span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo new<br><code>hexo new</code>用于新建文章</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">layout 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</span><br><span class="line">title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo server<br><code>hexo server / hexo s</code>用于启动本地服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server [-p] [-i] [-s]</span><br><span class="line">-p 选项，指定服务器端口，默认为 4000</span><br><span class="line">-i 选项，指定服务器 IP 地址，默认为 0.0.0.0</span><br><span class="line">-s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo generate<br><code>hexo generate / hexo g</code>用于生成静态网页</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g --watch                   <span class="comment">#监视文件变动</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo deploy<br><code>hexo deploy / hexo d</code>用于部署到远程服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol><li>安装next主题，以npm方式进行安装<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></tbody></table></figure></li><li>修改主题<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">${project_root}</span>\_config.yml</span><br><span class="line">theme: next      <span class="comment">#启用next主题</span></span><br><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></li><li>更换样式<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">${project_root}</span>\node_modules\hexo-theme-next\_config.yml</span><br><span class="line">对next模板的默认Muse进行修改</span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="如何在文章中插入图片"><a href="#如何在文章中插入图片" class="headerlink" title="如何在文章中插入图片"></a>如何在文章中插入图片</h2><ol><li>修改站点配置文件<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">${project_root}</span></span><br><span class="line">vim <span class="variable">${project_root}</span>\_config.yml</span><br><span class="line">post_asset_folder: <span class="literal">true</span>             <span class="comment">#将此项设置为true</span></span><br></pre></td></tr></tbody></table></figure></li><li>安装插件<br>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> – save</li><li>插入图片<br>运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片<br>插入格式为 <code>![图片描述](xxxx/图片名.jpg)</code></li></ol><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>本站中使用了<a href="https://github.com/tomotoes/hexo-theme-tomotoes/">tomotoes主题</a>  更多主题可参考 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/38872/question2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line">cd ${project_root}</span><br><span class="line">npm install lodash                      #在项目根目录下安装lodash组件</span><br><span class="line">cd ${project_root}\node_modules\hexo\package.json </span><br><span class="line">vim package.json</span><br><span class="line">添加 "lodash": "4.17.21"</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/38872/config1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">${project_root}</span>\node_modules\hexo\lib\hexo\index.js </span><br><span class="line">添加 const _ = require(<span class="string">"lodash"</span>); 和this._ = _;</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/38872/config2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/38872/config3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><a href="https://my.oschina.net/zhengqingya/blog/3070979">https://my.oschina.net/zhengqingya/blog/3070979</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;command&quot;&gt;&lt;a href=&quot;#command&quot; class=&quot;headerlink&quot; title=&quot;command&quot;&gt;&lt;/a&gt;command&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;hexo init&lt;br&gt;&lt;code&gt;hexo init&lt;/code&gt;用于初始化本</summary>
      
    
    
    
    
    <category term="技术分享" scheme="http://ufopkk.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
